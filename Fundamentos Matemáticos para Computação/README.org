#+TITLE: Fundamentos Matemáticos para Computação
#+AUTHOR: Douglas Maioli
#+LANGUAGE: pt
#+OPTIONS: date:nil

* TOC :toc:
- [[#matemática-discreta][Matemática discreta]]
  - [[#lógica][Lógica]]
    - [[#proposição-conectivos-lógicos-e-tabela-verdade][Proposição, conectivos lógicos e tabela-verdade]]
    - [[#fórmulas-tautologia-e-contradição][Fórmulas, tautologia e contradição]]
    - [[#equivalências-tautológicas][Equivalências tautológicas]]
    - [[#regras-de-inferência][Regras de inferência]]
    - [[#predicados-e-quantificadores][Predicados e quantificadores]]
    - [[#prolog][PROLOG]]
    - [[#paradoxo][Paradoxo]]
  - [[#técnicas-de-demonstrações-matemáticas][Técnicas de demonstrações matemáticas]]
    - [[#técnicas-de-demonstração][Técnicas de demonstração]]
      - [[#exaustão][Exaustão]]
      - [[#direta][Direta]]
      - [[#contraposição][Contraposição]]
      - [[#redução-ao-absurdo][Redução ao absurdo]]
      - [[#indução][Indução]]
        - [[#primeiro-princípio-de-indução][Primeiro princípio de indução]]
        - [[#segundo-princípio-de-indução][Segundo princípio de indução]]
  - [[#demonstração-de-correção][Demonstração de correção]]
    - [[#tripla-de-hoare][Tripla de Hoare]]
    - [[#axioma-de-atribuição][Axioma de atribuição]]
    - [[#regra-condicional][Regra condicional]]
    - [[#regra-do-laço][Regra do laço]]
  - [[#recusividade][Recusividade]]
    - [[#sequência-definida-por-recorrência][Sequência definida por recorrência]]
    - [[#conjunto-definido-por-recorrência][Conjunto definido por recorrência]]
    - [[#operações-definidas-por-recorrência][Operações definidas por recorrência]]
    - [[#algoritmos-definidos-por-recorrência][Algoritmos definidos por recorrência]]
    - [[#tipos-de-relação-recursiva][Tipos de relação recursiva]]
    - [[#solução-em-fórmula-fechada][Solução em fórmula fechada]]

* Matemática discreta
** Lógica
*** Proposição, conectivos lógicos e tabela-verdade
+ Proposição: uma sentença completa (sem variáveis abertas) que será considerada *verdadeira* ou *falsa*
  + Valor lógico
    + Verdadeiro: 1
    + Falso: 0
  + Princípios
    + Princípio da identidade: uma proposição verdadeira é verdadeira, uma proposição falsa é falsa
    + Princípio da não-contradição: nenhuma proposição pode ser verdadeira e falsa ao mesmo tempo
    + Princípio do terceiro-excluído: uma proposição ou será verdadira ou srá falsa: não há outra possibilidade
+ Conectivos
  |---------------------+----------+------------------------------+----------|
  | Conectivo           | Símbolos | Lê-se                        | Exemplos |
  |---------------------+----------+------------------------------+----------|
  | Negação             | \neg ~ '    | Não                          | \neg p      |
  | Conjunção           | \wedge .      | E                            | p \wedge q    |
  | Disjunção inclusiva | \vee +      | Ou                           | p \vee q    |
  | Disjunção exclusiva | \veebar \oplus      | Ou ... Ou ..., mas não ambos | p \veebar q    |
  | Condicional         | \Rightarrow \rightarrow      | Se ... Então                 | p \Rightarrow q    |
  | Bicondicional       | \Leftrightarrow \leftrightarrow      | Se, e somente se             | p \Leftrightarrow q    |
  |---------------------+----------+------------------------------+----------|
+ Tabela-verdade
  + A quantidade de linhas de uma tabela verdade são determinadas por \(2^n\), onde \(n\) é o número de proposições
  + Tabela verdade dos conectivos
    + AND
      |---+---+-------|
      | A | B | A \wedge B |
      |---+---+-------|
      | V | V |     V |
      | V | F |     V |
      | F | V |     V |
      | F | F |     F |
      |---+---+-------|
    + OR
      |---+---+-------|
      | A | B | A \vee B |
      |---+---+-------|
      | V | V | V     |
      | V | F | V     |
      | F | V | V     |
      | F | F | F     |
      |---+---+-------|
    + XOR
      |---+---+-------|
      | A | B | A \veebar B |
      |---+---+-------|
      | V | V | F     |
      | V | F | V     |
      | F | V | V     |
      | F | F | F     |
      |---+---+-------|
    + NOT
      |---+----|
      | A | A' |
      |---+----|
      | V | F  |
      | F | V  |
      |---+----|
    + Condicional
      + Se A então B
      + A logo B
      + A somente se B
      + A é condição suficiente para B
      + B segue de A
      + B é condição necessária para A
      |---+---+-------|
      | A | B | A \Rightarrow B |
      |---+---+-------|
      | V | V | V     |
      | V | F | F     |
      | F | V | V     |
      | F | F | V     |
      |---+---+-------|
  + Bicondicional
    + Equivalência
    + A se, e somente se, B
    + A é condição necessária e suficiente para B
    |---+---+-------|
    | A | B | A \Leftrightarrow B |
    |---+---+-------|
    | V | V | V     |
    | V | F | F     |
    | F | V | F     |
    | F | F | V     |
    |---+---+-------|
*** Fórmulas, tautologia e contradição
+ Fórmula bem formulada (WFF): uma cadeia que forma uma expressão válida
+ Ordem de precedência
  1. Parênteses
  2. \neg
  3. \vee, \wedge
  4. \Rightarrow 
  5. \Leftrightarrow
+ Conectivo principal: o último conectivo a ser analisado na fórmula
+ Tautologia: uma fórmula que é sempre verdadeira, independentemente dos valores lógicos atribuídos às suas proposições
  + Exercício: monte a tabela verdade de A \wedge B \Rightarrow B \vee A
    |---+---+-------+-------+---------------|
    | A | B | A \wedge B | B \vee A | A \wedge B \Rightarrow B \vee A |
    |---+---+-------+-------+---------------|
    | V | V |   V   |   V   |      V        |
    | V | F |   F   |   V   |      V        |
    | F | V |   F   |   V   |      V        |
    | F | F |   F   |   F   |      V        |
    |---+---+-------+-------+---------------|
+ Contradição: uma fórmula que é sempre falsa, independentemente dos valores lógicos atribuídos às suas proposições
*** Equivalências tautológicas
+ Equivalência tautológica: se P e Q são duas WFFs e elas são verdeiras exatemante nos mesmos casos, temos que P \Leftrightarrow Q é uma tautologia
  + Comutatividade
    + A \wedge B \Leftrightarrow B \wedge A
    + A \vee B \Leftrightarrow B \vee A
    + A \veebar B \Leftrightarrow B \veebar A
  + Associatividade
    + (A \wedge B) \wedge C \Leftrightarrow A \wedge (B \wedge C)
    + (A \vee B) \vee C \Leftrightarrow A \vee (B \vee C)
  + Distributividade
    + A \vee (B \wedge C) \Leftrightarrow (A \vee B) \wedge (A \vee C)
    + A \wedge (B \vee C) \Leftrightarrow (A \wedge B) \vee (A \wedge C)
  + Elemento neutro
    + A \wedge 1 \Leftrightarrow A
    + A \vee 0 \Leftrightarrow A
  + Propriedades do 0 e 1
    + A \wedge 0 \Leftrightarrow 0
    + A \vee 1 \Leftrightarrow 1
  + Propriedades complementares
    + A \wedge \neg A \Leftrightarrow 0
    + A \vee \neg A \Rightarrow 1
  + Lei de morgan
    + \neg (A \wedge B) \Leftrightarrow \neg A \vee \neg B
    + \neg (A \vee B) \Leftrightarrow \neg A \wedge \neg B
  + Definição de equivalência
    + (A \Rightarrow B) \wedge (B \Rightarrow A) \Leftrightarrow (A \Leftrightarrow B)
  + Condicional
    + (A \Leftrightarrow B) \Leftrightarrow \neg A \vee B
  + Contraposição
    + (A \Rightarrow B) \Leftrightarrow (\neg B \Rightarrow \neg A)
  + Dupla negação
    + \neg (\neg A) \Leftrightarrow A
*** Regras de inferência
+ Regras de inferência: regras de transformação sintáticas que podem ser usadas para inferir uma conclusão a partir de premissas ou hipóteses, para criar um argumento
  + Modus ponens
    + ((A \Rightarrow B) \wedge A) \Rightarrow B
  + Modus tollens
    + ((A \Rightarrow B) \wedge \neg B) \Rightarrow \neg A
  + Conjunção
    + (A \wedge B) \Rightarrow A \wedge B
  + Simplificação
    + (A \wedge B) \Rightarrow A
    + (A \wedge B) \Rightarrow B
  + Adição
    + A \Rightarrow A \vee B
  + Silogismo hipotético
    + (A \Rightarrow B) \wedge (B \Rightarrow C) \Rightarrow (A \Rightarrow C)
  + Silogismo disjuntivo
    + (\neg A) \wedge (A \vee B) \Rightarrow B
  + Exportação
    + ((A \wedge B) \Rightarrow C) \Rightarrow (A \Rightarrow (B \Rightarrow C))
*** Predicados e quantificadores
+ Predicado: denota uma relação entre objetos de um determiando contexto de discurso
  + \(P(x): x^2 < 9\)
  + Domínio: comjunto universo
+ Quantificadores: quantos conjuntos ou elementos no conjunto universo
  + Quantificador universal (\forall)
    + (\forall x \in F)P(x) ou (\forall x)[F(x) \Rightarrow P(x)] 
    + Para todo
    + Para cada
    + Para qualquer
  + Quantificador existencial (\exists)
    + (\exists x \in F))(x)
    + Existe
    + Existe pelo menos um
    + Para algum
    + Há algum
  + Quantificador de existência e unicidade (\exists!)
    + (\exists! x \in F)P(x) ou (\exists! x)[F(x) \Rightarrow P(x)]
    + Existe um único
+ Cláusula de Horn: cláusula com no máximo um predicado não negado
  + Cláusula: disjunção de predicados
  + \(\neg P_1(x) \vee \neg P_2(x) \vee (P_3(x) \vee Q)\)
+ Negação de quantificadores
  + Quantificador universal
    + \neg [(\forall x \in F)P(x)]
      + \neg(\forall x \in F) \neg P(x)
        + (\exists x \in F) \neg P(x)
  + Quantificador existencial
    + \neg [(\exists x \in C)[P(x) \wedge Q(x)]]
      + \neg (\exists x \in C) \neg [P(x) \wedge Q(x)]
        + (\forall x \in C)[\neg [P(x) \vee \neg Q(x)]]
+ Regras de inferência
  + Particularização universal
    + De (\forall x)(P(x)), podemos deduzir P(t)
      + t é uma constante ou uma variável, e se for uma variável não deve estar dentro do escopo de um quantificador de t
      + "Todos os homens são mortais. Sócrates é homem. Logo, Sócrates é mortal"
        + H(x): x é um homem
        + M(x): x é mortal
        + s: Sócrates
        + (\forall x)[H(x) \Rightarrow M(x)] \wedge H(s) \Rightarrow M(s)
          1. (\forall x)[H(x) \Rightarrow M(x)]
          2. H(s)
          3. H(s) \Rightarrow M(s)        particularização universal de 1
          4. M(s)               modus ponens de 2,3
  + Particularização existencial
    + De (\exists x)P(x), podemos deduzir P(a)
      + a é uma constante não utilizada anteriormente na sequência da demonstração nem na conclusão
  + Generalização existencial
    + De P(x) ou P(a), podemos deduzir (\exists x)P(x)
      + Para ir de P(a) para (\exists x)P(x), x não pode aparecer em P(a)
  + Generalização universal
    + De P(x), podemos deduzir (\forall x)P(x)
      + P(x) não pode ser deduzida de nenhuma hipótese na qual x é uma variável livre
      + P(x) não pode ser deduzida, via equivalências, de uma WFF onde x é uma variável livre
      + x não pode ser constante
*** PROLOG
+ Linguagem de programação baseado em lógica de predicados
  + Processo de computação pode ser visto como uma sequência lógica de inferências
+ Todo comando deve ser finalizado com '.'
+ Variáveis devem ser simbolizadas em letras MAIÚSCULAS
+ Fatos: constatantes que deixam os predicados verdadeiros
  + Devem ser acrescentados no banco de dados
+ Consultas: feitas no console, onde não podem ser utilizadas variáveias abertas
  + ~? - fato(x, y).~
    + Retorna ~True~ ou ~False~
+ Regras: fatos obtidos através de uma WFF, utilizando o predicado com uma variável como argumento
  + Retorna os resultados que tornam a WFF verdadeira
  + ~personagem(X)~
    + Retorana todos os personagens
+ OR: representado por ~;~
+ AND: representado por ~,~
*** Paradoxo
+ Paradoxo: declaração aparentemente verdadeira que leva a uma contradição lógica, ou a uma situação que contradiz a intuição comum
** Técnicas de demonstrações matemáticas
+ Teorema: uma afirmação que foi provada como verdadeira, utilizando outras afirmações demonstradas anteriormente
  + Dado P \Rightarrow Q, se P for verdadeiro e provarmos que Q também será, P \Rightarrow Q torna-se um teorema
  + Conjectura: Enquanto uma afirmação não é provada, é chamada conjectura
  + Axiomas: afirmações tão simples que não precisam de demonstrações
+ Um contraexemplo é suficiente para provar que uma afirmação qualquer é falsa
*** Técnicas de demonstração
+ Em teoremas da forma (P \Leftrightarrow Q), é necessário provar P \Rightarrow Q e Q \Rightarrow P
**** Exaustão
+ Pouco aplicável
+ Prova-se que a afirmação é verdadeira para todos os possíveis valores de x no domínio
  + Impossível de ser utilizado em proposições com domínio infinito
**** Direta
+ Estabelece-se uma sequẽncia de demonstração partindo de P e chegando a Q
**** Contraposição
+ (P \Rightarrow Q) \Leftrightarrow (\neg Q \Rightarrow \neg P)
  + Nega-se a conclusão para chegar na negação da premissa
**** Redução ao absurdo
+ (P \Rightarrow Q) \Leftrightarrow (P \wedge \neg Q \Rightarrow 0)
  + Se P é verdade, Q também é verdadeiro
+ Nega-se a conclusão para chegar em um absurdo
  + Uma das premissas derivadas é uma negação de uma das hipóteses
**** Indução
***** Primeiro princípio de indução
+ (P(a) é verdade E \((\forall k \in \mathbb{N}^*)[P(k)\ verdade \Rightarrow P(k+1)\ verdade\)) \Rightarrow P(n) é verdadeiro para todos os números inteiros n \geq a
  + Passo base: P(a) é verdade
  + Hípotese de indução: \((\forall k \in \mathbb{N}^*)[P(k)\ verdade\)
  + Passo indutivo: \(P(k+1)\ verdade\)
+ Exemplo: prove que a seguinte relação é verdadeira para todo inteiro positivo n
  \(1 + 2 + 3 + \cdots + n = \frac{n(n+1)}{2}\)
  + Passo básico: \(n = 1\)
    + \(1 = \frac{1(1+1)}{2} = 1\)
  + Hipótese de indução: \(1 + 2 + 3 + \cdots + k = \frac{k(k+1)}{2}\)
  + Passo indutivo: \(1 + 2 + \cdots k + (k+1) = \frac{k(k+1)}{2} + \frac{k+1}{1} = \frac{k(k+1) + 2(k+1)}{2}\)
***** Segundo princípio de indução 
+ (P(a) é verdade E (\(\forall k \in \mathbb{N}^*\))[P(r) é verdade para todo r E (a \leq r \leq k \Rightarrow P(k+1) verdade)) \Rightarrow P(n é verdadeiro para todos os número inteiros n \geq a)

** Demonstração de correção
+ Correção de algoritmos
  + Podem ser verifcados por
    + Teste do programa
    + Demonstração de correção: utiliza técnicas de lógica formal
+ Asserções: \(( \forall X) (Q(X) \Rightarrow R(X, P(X)))\)
  + X: coleção de entradas para um programa P
  + P transforma x em uma saída Y (Y = P(X))
  + Q(X): predicado que descreve as condições de entrada
  + R(X, P(X)): predicado que descreve as condições de saída
  + Exemplo: P calcula a raíz quadrada de X, obtendo Y
    + Q(X): X \geq 0
    + R(X,Y): Y^2 = X \wedge Y \geq 0
    + (\forall X)(Q(X) \Rightarrow R(X, Y)): \((\forall X \in \mathbb{R}(X \geq 0 \Rightarrow Y^2 = X \wedge Y \geq 0))\)
*** Tripla de Hoare
+ Método de representação do programa
+ {Q}P{R}
  + P é o programa
  + Q(X): predicado que descreve as condições de entrada
  + R(X, P(X)): predicado que descreve as condições de saída
+ Para um programa com vários comands, utiliza-se a notação:
  #+DOWNLOADED: https://i.imgur.com/qKsJewd.png @ 2024-01-05 09:27:17
  [[file:Matemática_discreta/2024-01-05_09-27-17_qKsJewd.png]]
*** Axioma de atribuição
+ Demonstração de correção
+ Etapas
  1. Começa-se pela pós-condição (R)
  2. Executa-se o comando (P)
  3. Testa a pré-condição (Q)
*** Regra condicional
+ Necessita de duas [[Tripla de Hoare][triplas de Hoare]]
  #+begin_src python
    y = 0
    if y < y:
        y = y + 1
    else:
        y = 5
  #+end_src 
  + Seria escrito como
    {Y = 0 \wedge Y < 5} Y = Y + 1 {Y = 1}

    {Y = 0 \wedge Y \geq 5} Y = 5{Y = 1}
    + A segunda tripla (do exemplo) é falsa (y = 0 \wedge y \geq 5)
*** Regra do laço
+ Laço do tipo
  #+begin_src
    enquanto condição B faça
        P
    fim_do_enquanto
  #+end_src
+ Duas [[Tripla de Hoare][triplas de Hoare]] a serem consideradas
  {Q \wedge B}P{Q}

  Deduzimos \(\{Q\}s_i\{Q \wedge \neg B\}\)
  + Onde Q é a invariante do laço
  + Demonstrado por PIF
** Recusividade
+ Algoritmo que chama a si mesmo
  + Definição onde o item a ser definido aparece como parte da própria definição
+ Precisa de um caso básico para ser finalizada
*** Sequência definida por recorrência
+ Sequência: lista de objetos que são numerados em uma determinada ordem
+ Exemplo
  + Q(1) = 1
  + Q(n) = 2 Q(n-1), n \geq 2
+ Torre de Hanói: fórmula para determinar a quantidade de movimentos mínimos para se reseolver a Torre de Hanói com n discos, n
  + H(1) = 1
  + H(n) = 2 H(n-1) + 1, n \geq 2
+ Sequência de Fibonnacci
  + F(1) = 1
  + F(2) = 1
  + F(n) = F(n-1) + F(n-2), n \geq 3
*** Conjunto definido por recorrência
+ Conjunto: coleção de objetos onde não há, necessariamente, uma ordem impostas
+ Exemplo: seja F o conjunto das WFFs
  + Proposições atômicas \in F
  + Se P e Q \in F, então
    P \wedge Q, P \vee Q, \neg P, P \Rightarrow Q e P \Leftrightarrow Q também são \in F
*** Operações definidas por recorrência
+ Fatorial
  + 0! = 1
  + a! = a (a - 1)!, a \geq 1
+ Exponenciação
  + \(a^0 = 1\) 
  + \(a^n = a \cdot a^{n-1}, n \geq 1\) 
*** Algoritmos definidos por recorrência
#+begin_src python
def fibonacci(n):
    if ((n == 1) or (n == 2)):
        return 1
    elif (n >= 3):
        return (fibonacci(n - 1) + fibonacci(n - 2))
    else:
        print("Valor inválido")
#+end_src 
*** Tipos de relação recursiva
+ Linear: os valores anteriores de S que aparecem na fórmula estão na primeira potência

  \(S(n) = f_1(n) \cdot S(n-1) + f_2(n) \cdot S(n - 2) + \cdots + f_k(n) \cdot S(n-k) + g(n)\) 
  + Linear com *coeficiente constantes* se todos os \(f_1\) são constantes

    \(S(n) = c_1 \cdot S(n-1) + c_2 \cdot S(n - 2) + \cdots + c_3 \cdot S(n-k) + g(n)\) 
    + Linear com coeficiente constantes de *primeira ordem* se depende apenas do termo n - 1

        \(S(n) = c \cdot S(n-1) + g(n)\) 
      + Linear com coeficiente constantes de *primeira ordem* homogênea se g(n) = 0

        \(S(n) = c \cdot S(n-1)\) 
*** Solução em fórmula fechada
+ Economiza memória
+ Uma forma de encontrar uma fórmula fechada para uma função recursiva é Expandir/conjecturar/verificar
  1. Expandir a fórmula recursiva
  2. Conjecturar a fórmula fechada
  3. Verificar se a fórmula fechada encontrada está correta
     + Geralmente por indução
+ Para todas as fórmulas lineares, de primeira ordem com coeficientes constantes, vale
  + \(T(n) = c \cdot T(n-1) + g(n)\) 
  + \(T(n) = c^{n-1} \cdot T(1) + \sum_{i = 2} c^{n - i} \cdot g(i)\)
+ Para todas as fórmulas lineares, homogênea, de segunda ordem com coeficientes constantes, vale
  + Raízes diferentes
    + \(T(n) = a \cdot T(n-1) + b \cdot T(n-2)\)
    + \(T(n) = p \cdot r_1^{n-1} + q \cdot r_2^{n-1}\)
      + Onde \(r_1\) e \(r_2\) são as raízes de \(x^2 - ax - b\)
      + Onde p e q são as soluções do sistema
        \(\left\{\begin{matrix} p & + & q & = & T(1)\\ r_1 p & + & r_2 q & = & T(2) \end{matrix} \right. \)
  + Uma raiz
    + \(T(n) = a \cdot T(n-1) + b \cdot T(n-2)\)
    + \(T(n) = p \cdot r^{n-1} + q \cdot (n-1) \cdot r^{n-1}\)
      + Onde \(r\) é a raiz de \(x^2 - ax - b\)
      + Onde p e q são as soluções do sistema
        \(\left\{\begin{matrix} p & = & T(1)\\ r p & + & r q & = & T(2) \end{matrix} \right. \)
+ Dada a relação recursiva
  + \(T(n) = c \cdot T(\frac{n}{2}) + g(n), n \geq 2, n = 2^t, t \in \mathbb{N}\)
  + \(T(n) = c^{log_2(n)} \cdot T(1) + \sum_{i = 1}^{log_2(n)} c^{log_2(n) -i} \cdot g(2^i)\)
